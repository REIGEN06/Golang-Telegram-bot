package main

import (
	"buy-list/product"
	"buy-list/storage/postgresql"
	"log"
	"os"
	"reflect"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func init() {
	if err := godotenv.Load(); err != nil {
		log.Print("No .env file found")
	}
}

func SendMessageToUser(bot *tgbotapi.BotAPI, update tgbotapi.Update, msg string) {
	bot_msg := tgbotapi.NewMessage(update.Message.From.ID, msg)
	bot_msg.ReplyToMessageID = update.Message.MessageID
	if _, err := bot.Send(bot_msg); err != nil {
		panic(err)
	}
}

// –∫–∞–∫ –ª—É—á—à–µ —Å–¥–µ–ª–∞—Ç—å —Ç–∞–π–º–µ—Ä? –∫–∞–∫ –≤–æ–æ–±—â–µ –¥–µ–ª–∞—Ç—å –µ–≥–æ
// –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ goroutine –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å

func main() {
	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_APITOKEN"))
	if err != nil {
		panic(err)
	}
	db := postgresql.Connect(os.Getenv("POSTGRESQL_TOKEN"))

	updateConfig := tgbotapi.NewUpdate(0)
	updateConfig.Timeout = 90
	updates := bot.GetUpdatesChan(updateConfig)
	for update := range updates {
		if update.Message == nil {
			continue
		}

		user_nickname := update.SentFrom().UserName
		user_msg := update.Message.Text
		user_name := update.Message.From.FirstName
		user_id := update.Message.From.ID
		chat_id := update.Message.Chat.ID
		status := db.GetStatus(user_id, chat_id)

		log.Printf("nickname: %s \n", user_nickname)
		log.Printf("user_name: %s \n", user_name)
		//log.Printf("user_id: %d \n", user_id)
		//log.Printf("chat_id: %d \n", chat_id)
		//log.Printf("status: %d \n", status)
		log.Printf("msg: %s \n", user_msg)
		log.Println()

		if status == 1 {
			msg := "–ü—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ"
			text := strings.Fields(user_msg)
			if len(text) == 4 {
				weight, errFloat := strconv.ParseFloat(text[1], 32)
				date, errDate := time.Parse("02-01-2006 15:04", text[2]+" "+text[3])
				if date.Before(time.Now()) {
					msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
				}
				if (reflect.TypeOf(text[0]) == reflect.TypeOf(user_msg)) && (errFloat == nil) && (errDate == nil) && date.After(time.Now()) {
					p := product.Product{}
					p.CreateProduct(user_id, chat_id, text[0], weight, true, false, time.Now(), date, true)
					err := db.AddIn(&p)

					msg = "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!\n–¢–∞–π–º–µ—Ä –∑–∞–≤–µ–¥—ë–Ω."
					if err != nil {
						msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏."
					}
				}
			}
			if len(text) == 1 {
				p := product.Product{}
				p.CreateProduct(user_id, chat_id, text[0], 0, true, false, time.Now(), time.Date(2030, 1, 1, 0, 0, 0, 0, time.UTC), false)
				err := db.AddIn(&p)

				msg = "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!\n–ë–µ–∑ —Ç–∞–π–º–µ—Ä–∞."
				if err != nil {
					msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏."
				}
			}
			if len(text) == 3 && text[1] == "—Å" {
				today := time.Now().Format("02-01-2006")
				today += " " + text[2]
				date, dateerr := time.Parse("02-01-2006 15:04", today)
				if date.Before(time.Now()) {
					msg = "–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –ø—Ä–æ—à–ª–æ!"
				}
				if dateerr == nil && date.After(time.Now()) {
					p := product.Product{}
					p.CreateProduct(user_id, chat_id, text[0], 0, true, false, time.Now(), date, true)
					err := db.AddIn(&p)
					msg = "–ü—Ä–æ–¥—É–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!\n–¢–∞–π–º–µ—Ä –∑–∞–≤–µ–¥—ë–Ω."
					if err != nil {
						msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö."
					}
				} else {
					msg = "–° –¥–∞—Ç–æ–π —á—Ç–æ-—Ç–æ –Ω–µ —Ç–∞–∫.."
				}
			}

			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		}
		if status == 2 {
			msg := "–ü—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ"
			text := strings.Fields(user_msg)
			if len(text) == 3 {
				from, fromerr := time.Parse("02-01-2006", text[1])
				to, toerr := time.Parse("02-01-2006", text[2])
				if to.Before(from) && to.Before(time.Now()) {
					msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
				}
				if (fromerr == nil) && (toerr == nil) && to.After(from) && to.After(time.Now()) {
					p := product.Product{}
					p.CreateProduct(user_id, chat_id, text[0], 0, false, true, from, to, true)
					err := db.AddIn(&p)

					msg = text[0] + " –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫!"
					if err != nil {
						msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏."
					}
				}
			}
			//–∫—É–ø–∏–ª - –ø–µ—Ä–µ–Ω–æ—Å –∏–∑ –ª–∏—Å—Ç–∞
			if len(text) == 4 {
				from, fromerr := time.Parse("02-01-2006", text[2])
				to, toerr := time.Parse("02-01-2006", text[3])
				if to.Before(from) && to.Before(time.Now()) {
					msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
				}
				if (fromerr == nil) && (toerr == nil) && to.After(from) && to.After(time.Now()) {
					err := db.SetFridge(user_id, chat_id, from, to, text[1])

					msg = text[1] + " –ø–µ—Ä–µ–Ω–µ—Å—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫!"
					if err != nil {
						msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–æ—Å–µ."
						if err.Error() == "NOT_EXISTS" {
							msg = text[1] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
						}
					}
				}
			}
			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		}
		if status == 3 {
			msg := "–ü—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ"
			text := strings.Fields(user_msg)
			if len(text) == 3 {
				from, fromerr := time.Parse("02-01-2006", text[1])
				to, toerr := time.Parse("02-01-2006", text[2])
				if to.Before(from) && to.Before(time.Now()) {
					msg = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –≤—Ä–µ–º—è"
				}
				if (fromerr == nil) && (toerr == nil) && to.After(from) && to.After(time.Now()) {
					err := db.SetUsed(user_id, chat_id, from, to, text[0])

					msg = text[0] + " –æ—Ç–∫—Ä—ã—Ç, —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω!"
					if err != nil {
						msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞."
						if err.Error() == "NOT_EXISTS" {
							msg = text[0] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
						}
					}
				}

			}
			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		}
		if status == 4 {
			msg := "–ü—Ä–æ–¥—É–∫—Ç —É–∫–∞–∑–∞–Ω –Ω–µ –≤–µ—Ä–Ω–æ"
			text := strings.Fields(user_msg)
			if len(text) == 1 {
				msg = text[0] + " —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω/–≤—ã–±—Ä–æ—à–µ–Ω!"
				err := db.SetTrash(user_id, chat_id, text[0])
				if err != nil {
					msg = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–∏/–≤—ã–±—Ä–∞—Å—ã–≤–∞–Ω–∏–∏."
					if err.Error() == "NOT_EXISTS" {
						msg = text[0] + " –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
					}
				}
			}
			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		}
		if status == 5 {
			msg := "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–±—Ä–∞–Ω —Å–ø–∏—Å–æ–∫"
			text := strings.Fields(user_msg)
			if len(text) == 1 {
				if text[0] == "1" || text[0] == "2" {
					param, _ := strconv.ParseInt(text[0], 10, 64)
					msg = "–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
					if text[0] == "1" {
						msg += " –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"
					} else if text[0] == "2" {
						msg += " –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫–µ –ø–æ —Å—Ä–æ–∫—É –≥–æ–¥–Ω–æ—Å—Ç–∏"
					}
					products, _ := db.GetList(user_id, chat_id, param)
					for i := 0; i < len(products); i++ {
						msg += "\n" + strconv.Itoa(i+1) + ". " + products[i].Name
						if products[i].Weight != 0 {
							msg += ", " + strconv.FormatFloat(products[i].Weight, 'f', 0, 64) + "–≥—Ä."
						}
						if products[i].TimerEnable && products[i].Rest_time > 0 {
							msg += ", —Ç–∞–π–º–µ—Ä –≤–∫–ª—é—á–µ–Ω"
						}
						if text[0] == "2" && products[i].TimerEnable {
							if products[i].Rest_time > 0 {
								rtime := products[i].Rest_time.String()
								rtime = strings.ReplaceAll(rtime, "h", " —á–∞—Å–æ–≤, ")
								rtime = strings.ReplaceAll(rtime, "m", " –º–∏–Ω—É—Ç, ")
								rtime = strings.ReplaceAll(rtime, "s", " —Å–µ–∫—É–Ω–¥ ")
								msg += ", –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑: " + rtime
							} else {
								msg += ", —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—à–µ–ª"
							}

						}
					}

				}
			}
			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		}

		if user_msg == "/help" || user_msg == "/start" {
			msg := "üò≥–í–ê–ñ–ù–ûüò≥ –ü–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –≤–ø–µ—Ä–≤—ã–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –≤–∞–º –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /reg, —á—Ç–æ–±—ã –±–æ—Ç –≤–∞—Å –∑–∞–ø–æ–º–Ω–∏–ª.\n\n–ù–∞–∂–º–∏—Ç–µ '/' –∏–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É '–ú–µ–Ω—é' —Å–ª–µ–≤–∞ –≤–Ω–∏–∑—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã"
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/reg" {
			msg := db.CreateUser(user_nickname, user_name, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/addinlist" {
			msg := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞(–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º), –≤–µ—Å(–≤ –≥—Ä–∞–º–º–∞—Ö) –∏ –¥–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –ß–∏–ø—Å—ã 80 31-01-2023 09:00\n\n–õ–∏–±–æ –ø—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞üòä"
			db.SetStatus(1, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/addinfridge" {
			msg := "–ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ '–∫—É–ø–∏–ª', –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞(–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º) –∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –∫—É–ø–∏–ª –ß–∏–ø—Å—ã 31-01-2022 31-01-2023\n\n–ï—Å–ª–∏ –∂–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç –≤ —Ö–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫, —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –ß–∏–ø—Å—ã 31-01-2022 31-01-2023"
			db.SetStatus(2, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/open" {
			msg := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞(–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º), –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ—Ç–∫—Ä—ã–ª–∏ –∏ –Ω–æ–≤—ã–π —Å—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è\n–ü—Ä–∏–º–µ—Ä: –ß–∏–ø—Å—ã 24-01-2022 31-01-2022"
			db.SetStatus(3, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/finish" {
			msg := "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–∞(–æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º), –∫–æ—Ç–æ—Ä—ã–π –≤—ã –ø—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏/–≤—ã–±—Ä–æ—Å–∏–ª–∏"
			db.SetStatus(4, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/list" {
			msg := "–í–≤–µ–¥–∏—Ç–µ —Ü–∏—Ñ—Ä—É —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: \n1.–ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É [–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫]\n2.–ü–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é —Å—Ä–æ–∫–∞ –≥–æ–¥–Ω–æ—Å—Ç–∏ [–•–æ–ª–æ–¥–∏–ª—å–Ω–∏–∫]"
			db.SetStatus(5, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if user_msg == "/listused" {
			msg := "–°–ø–∏—Å–æ–∫ —Ä–∞–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤"
			products, _ := db.GetList(user_id, chat_id, 3)
			for i := 0; i < len(products); i++ {
				msg += "\n" + strconv.Itoa(i+1) + ". " + products[i].Name
				if products[i].Weight != 0 {
					msg += ", " + strconv.FormatFloat(products[i].Weight, 'f', 0, 64) + "–≥—Ä."
				}
				rtime := products[i].Rest_time.String()
				if products[i].Rest_time > 0 {
					rtime = strings.ReplaceAll(rtime, "h", " —á–∞—Å–æ–≤, ")
					rtime = strings.ReplaceAll(rtime, "m", " –º–∏–Ω—É—Ç, ")
					rtime = strings.ReplaceAll(rtime, "s", " —Å–µ–∫—É–Ω–¥ ")
					msg += ", –∏—Å–ø–æ—Ä—Ç–∏—Ç—Å—è —á–µ—Ä–µ–∑: " + rtime
				} else {
					msg += ", —Å—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ –≤—ã—à–µ–ª"
				}

			}
			db.SetStatus(0, user_id, chat_id)
			SendMessageToUser(bot, update, msg)
		} else if status <= 0 {
			msg := "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞"
			SendMessageToUser(bot, update, msg)
		}
	}

}
